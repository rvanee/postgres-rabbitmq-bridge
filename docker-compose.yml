networks:
  database-network:
  messaging-network:

services:
  db:
    image: postgres:latest
    restart: unless-stopped
    container_name: db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    networks:
      - database-network
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 30

  rmq0:
    image: rmq0
    container_name: "rabbitmq"
    build:
      context: .
      dockerfile: ./rabbitmq/Dockerfile
    ports:
      - 15673:15672
      - 15672:15692
    networks:
      - messaging-network
    hostname: rmq0
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PW}
      RABBITMQ_ERLANG_COOKIE: messaging-network
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  postgres_rabbitmq_bridge:
    platform: linux/amd64
    depends_on:
      db:
        condition: service_healthy
    environment:
        AMQP_URL: 'amqp://rmq0?connection_attempts=10&retry_delay=10'
    networks:
      - database-network
      - messaging-network
    build:
      context: ./
      dockerfile: postgres-rabbitmq-bridge/Dockerfile

  djangostub:
    platform: linux/amd64
    depends_on:
      postgres_rabbitmq_bridge:
          condition: service_started
    build:
      context: ./
      dockerfile: djangostub/Dockerfile
    networks:
      - database-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    networks:
      - messaging-network
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  db_management:
    image: postgres:latest
    restart: unless-stopped
    container_name: db_management
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_MANAGEMENT_PW}
      POSTGRES_USER: ${POSTGRES_MANAGEMENT_USER}
      POSTGRES_DB: ${POSTGRES_MANAGEMENT_DB}
    ports:
      - '5433:5432'
    networks:
      - messaging-network
    volumes:
      - ./db_management:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 30

  kpi_extractor:
    platform: linux/amd64
    depends_on:
      db:
        condition: service_healthy
    environment:
        AMQP_URL: 'amqp://rmq0?connection_attempts=10&retry_delay=10'
    networks:
      - messaging-network
    build:
      context: ./
      dockerfile: kpi-extractor/Dockerfile

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - messaging-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  prom_data: